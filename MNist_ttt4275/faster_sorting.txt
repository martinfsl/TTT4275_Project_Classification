This sorting technique is faster, but more hideous to look at:

% function [s0, s1, s2, s3, s4, s5, s6, s7, s8, s9] = sorting(training_data, training_label, num_train, vec_size)
%     s0 = zeros(0, vec_size);
%     s1 = zeros(0, vec_size);
%     s2 = zeros(0, vec_size);
%     s3 = zeros(0, vec_size);
%     s4 = zeros(0, vec_size);
%     s5 = zeros(0, vec_size);
%     s6 = zeros(0, vec_size);
%     s7 = zeros(0, vec_size);
%     s8 = zeros(0, vec_size);
%     s9 = zeros(0, vec_size);
%     
%     for j = 1:num_train
%         if training_label(j) == 0
%            s0(end+1, :) = training_data(j, :);
%         elseif training_label(j) == 1
%            s1(end+1, :) = training_data(j, :);
%         elseif training_label(j) == 2
%            s2(end+1, :) = training_data(j, :);
%         elseif training_label(j) == 3
%            s3(end+1, :) = training_data(j, :);
%         elseif training_label(j) == 4
%            s4(end+1, :) = training_data(j, :);
%         elseif training_label(j) == 5
%            s5(end+1, :) = training_data(j, :);
%         elseif training_label(j) == 6
%            s6(end+1, :) = training_data(j, :);
%         elseif training_label(j) == 7
%            s7(end+1, :) = training_data(j, :);
%         elseif training_label(j) == 8
%            s8(end+1, :) = training_data(j, :);
%         elseif training_label(j) == 9
%            s9(end+1, :) = training_data(j, :);
%         end
%         disp(j);
%     end